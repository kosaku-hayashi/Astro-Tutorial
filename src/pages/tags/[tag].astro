---
import type { MarkdownInstance } from "astro";
import BlogPost from "../../components/BlogPost.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  const allPosts = (await Astro.glob("../posts/*.md")) as MarkdownInstance<Record<string, any>>[];
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>{tag}のタグが付いた記事</p>
  <ul>{ posts.map((post) => <BlogPost url={post.url} title={post.frontmatter.title}/>)}</ul>
</BaseLayout>

<!-- ---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";

// 型定義
interface Post {
  url: string;
  frontmatter: {
    title: string;
    tags?: string[];
  };
}

// getStaticPathsに型注釈を追加
export async function getStaticPaths(): Promise<
  { params: { tag: string }; props: { posts: Post[] } }[]
> {
  const allPosts = await Astro.glob<Post>("../posts/*.md");
  return [
    { params: { tag: "astro" }, props: { posts: allPosts } },
    { params: { tag: "成功" }, props: { posts: allPosts } },
    { params: { tag: "コミュニティ" }, props: { posts: allPosts } },
    { params: { tag: "ブログ" }, props: { posts: allPosts } },
    { params: { tag: "後退" }, props: { posts: allPosts } },
    { params: { tag: "公開学習" }, props: { posts: allPosts } },
  ];
}

// 型注釈で安全性を向上
const { tag } = Astro.params as { tag: string };
const { posts } = Astro.props as { posts: Post[] };

// フィルタリングした投稿のリスト
const filteredPosts = posts.filter((post) =>
  post.frontmatter.tags?.includes(tag)
);
---

<BaseLayout pageTitle={tag}>
  <p>{tag}のタグが付いた記事</p>
  <ul>
    {
      filteredPosts.map((post) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout> -->
